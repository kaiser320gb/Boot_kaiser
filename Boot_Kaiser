#include <iostream>
#include <thread>
#include <chrono>
#include <string>
#include <atomic>
#include <conio.h> // for _kbhit() and _getch()

#ifdef _WIN32
#include <Windows.h> // for system("cls") on Windows
#else
#include <cstdlib> // for system("clear") on Unix-like systems
#endif

std::atomic<bool> timerCanceled(false);

void clearScreen() {
#ifdef _WIN32
    system("cls");
#else
    system("clear");
#endif
}

void countdownTimer(double minutes) {
    int seconds = static_cast<int>(minutes * 60);
    int hours, mins;
    while (seconds > 0 && !timerCanceled.load()) {
        hours = seconds / 3600;
        mins = (seconds % 3600) / 60;
        int secs = seconds % 60;
        std::cout << "\rTime left: " << hours << " hours, " << mins << " minutes, and " << secs << " seconds" << std::flush;
        std::cout << " - Press any key to cancel." << std::flush;
        std::this_thread::sleep_for(std::chrono::seconds(1));
        seconds--;

        // Check if any key is pressed to cancel the timer
        if (_kbhit()) {
            timerCanceled.store(true);
            std::cout << "\rCancelling the timer...            " << std::endl; // Clear the line after cancellation message
            return;
        }
    }
    if (!timerCanceled.load()) {
        std::cout << "\rTime's up!                                 " << std::endl; // Clear the line after time's up message
    }
}

void rebootShutdownTimer(std::string option) {
    std::cout << "You have chosen to " << option << "." << std::endl;
    std::cout << "Please enter the timer duration in minutes: ";
    double minutes;
    std::cin >> minutes;

    std::string taskDescription = (option == "reboot") ? "Rebooting" : "Shutting down";

    std::cout << taskDescription << " in:" << std::endl;

    timerCanceled.store(false); // Reset the flag before starting a new timer

    std::thread timerThread(countdownTimer, minutes);
    timerThread.join();

    if (!timerCanceled.load()) {
        std::cout << taskDescription << " now!" << std::endl;
        // Perform reboot or shutdown
        std::string command = (option == "reboot") ? "shutdown /r /t 1" : "shutdown /s /t 1";
        system(command.c_str());
    }
}

void displayMenu() {
    clearScreen(); // Clear the screen before displaying the menu
    std::cout << R"(
 __________               __     ____  __.      .__                     
\______   \ ____   _____/  |_  |    |/ _|____  |__| ______ ___________ 
 |    |  _//  _ \ /  _ \   __\ |      < \__  \ |  |/  ___// __ \_  __ \
 |    |   (  <_> |  <_> )  |   |    |  \ / __ \|  |\___ \\  ___/|  | \/
 |______  /\____/ \____/|__|   |____|__ (____  /__/____  >\___  >__|   
        \/                             \/    \/        \/     \/        
 _______________________________________
|             Boot Kaiser               |
|_______________________________________|
|                                       |
|  1. Reboot                            |
|  2. Shutdown                          |
|  3. Exit Program                      |
|_______________________________________|
)";
}

void farewellMessage() {
    std::cout << R"(
 (                 (       )                             (                   (  (     
 )\ )              )\ ) ( /( (      (       (     (    ( )\   (  (       (   )\ )\ )  
(()/(    (    (   (()/( )\()))\ )  ))\    ( )(   ))\  ))((_)  )\))(   (  )( ((_|()/(  
 /(_))_  )\   )\   ((_)|(_)\(()/( /((_)   )(()\ /((_)/((_)   ((_)()\  )\(()\ _  ((_)) 
(_)) __|((_) ((_)  _| || |(_))(_)|_))    ((_|(_|_))((_))| |  _(()((_)((_)((_) | _| |  
  | (_ / _ \/ _ \/ _` || '_ \ || / -_)  / _| '_| || / -_) |  \ V  V / _ \ '_| / _` |  
   \___\___/\___/\__,_||_.__/\_, \___|  \__|_|  \_,_\___|_|   \_/\_/\___/_| |_\__,_|  
                             |__/                                                      
)";
    std::this_thread::sleep_for(std::chrono::seconds(3));
}

void secretOption() {
    std::cout << "You've discovered the secret option! The answer to the universe is 42." << std::endl;
    farewellMessage();
    clearScreen(); // Clear the screen before exiting
    std::cout << "Exiting the program." << std::endl;
    std::this_thread::sleep_for(std::chrono::seconds(3));
}

int main() {
    std::string option;

    displayMenu();

    while (true) {
        std::cout << "Welcome! Please choose an option (1, 2, or 3): ";
        std::cin >> option;

        if (option == "1") {
            rebootShutdownTimer("reboot");
            displayMenu(); // Display menu again after the timer
        }
        else if (option == "2") {
            rebootShutdownTimer("shutdown");
            displayMenu(); // Display menu again after the timer
        }
        else if (option == "3") {
            farewellMessage();
            clearScreen(); // Clear the screen before exiting
            std::cout << "Exiting the program." << std::endl;
            break;
        }
        else if (option == "42") {
            secretOption();
            break;
        }
        else {
            std::cout << "Invalid option. Please choose 'reboot', 'shutdown', or 'exit program'." << std::endl;
        }
    }

    return 0;
}
